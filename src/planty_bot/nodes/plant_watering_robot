#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import tf
from enum import Enum
from nav_msgs.msg import Odometry
from ar_track_alvar_msgs.msg import AlvarMarkers
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import math
import time
from sensor_msgs.msg import LaserScan

MARKER_ID_DETECTION = 17

class PlantyBot():
    def __init__(self):
        self.sub_odom_robot = rospy.Subscriber('/odom', Odometry, self.cbGetRobotOdom, queue_size = 1)
        self.sub_info_marker = rospy.Subscriber('/ar_pose_marker', AlvarMarkers, self.cbGetMarkerOdom, queue_size = 1)
        self.sub_scan_left = rospy.Subscriber('/ScanL', LaserScan, self.SensorCallbackLeft, queue_size=1)
        self.sub_scan_right = rospy.Subscriber('/ScanR', LaserScan, self.SensorCallbackRight, queue_size=1)
        self.sub_scan_straight = rospy.Subscriber('/ScanS', LaserScan, self.SensorCallbackStraight, queue_size=1)

        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

        self.ParkingSequence = Enum('ParkingSequence', 'searching_parking_lot changing_direction moving_nearby_parking_lot parking watering stop return_home finished')
        self.NearbySequence = Enum('NearbySequence', 'initial_turn go_straight turn_right parking')
        self.ObstacleAvoidanceSequence = Enum('ObstacleAvoidanceSequence', 'search_for_space turn_90 move_sideways turn_back drive_straight')
        self.current_nearby_sequence = self.NearbySequence.initial_turn.value
        self.current_parking_sequence = self.ParkingSequence.searching_parking_lot.value
        self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.search_for_space.value

        self.robot_2d_pose_x = .0
        self.robot_2d_pose_y = .0
        self.robot_2d_theta = .0
        self.marker_2d_pose_x = .0
        self.marker_2d_pose_y = .0
        self.marker_2d_theta = .0
        self.marker_2d_pose_x_list = []
        self.marker_2d_pose_y_list = []

        self.previous_robot_2d_theta = .0
        self.total_robot_2d_theta = .0
        self.is_triggered = False
        self.finished = False

        self.is_sequence_finished = False
        self.obstacle_detected = False
        self.currently_avoiding = False
        self.avoiding_left = False
        self.avoiding_right = False
        self.obstacle_left = []
        self.obstacle_right = []
        self.obstacle_twist = None

        self.search_left = False
        self.avoid_turn_angle = 1

        self.is_odom_received = False
        self.is_marker_pose_received = False
        self.marker_ids = [17, 14]
        self.current_marker = 0

        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            if self.is_odom_received is True:
                self.fnParking()
                #self.fnStop()
            
            loop_rate.sleep()

        rospy.on_shutdown(self.fnShutDown)

    def cbGetRobotOdom(self, robot_odom_msg):
        if self.is_odom_received == False:
            self.is_odom_received = True 
        
        pos_x, pos_y, theta = self.fnGet2DRobotPose(robot_odom_msg)

        self.robot_2d_pose_x = pos_x
        self.robot_2d_pose_y = pos_y
        self.robot_2d_theta = theta

        if (self.robot_2d_theta - self.previous_robot_2d_theta) > 5.:
            self.d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta) - 2 * math.pi
        elif (self.robot_2d_theta - self.previous_robot_2d_theta) < -5.:
            self.d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta) + 2 * math.pi
        else:
            self.d_theta = (self.robot_2d_theta - self.previous_robot_2d_theta)

        self.total_robot_2d_theta = self.total_robot_2d_theta + self.d_theta
        self.previous_robot_2d_theta = self.robot_2d_theta

        self.robot_2d_theta = self.total_robot_2d_theta
        #rospy.loginfo(f"robot theta: {self.robot_2d_theta}")

    def cbGetMarkerOdom(self, markers_odom_msg):
        for marker_odom_msg in markers_odom_msg.markers:
            if marker_odom_msg.id == self.marker_ids[self.current_marker]:
                if self.is_marker_pose_received == False:
                    self.is_marker_pose_received = True
                
                pos_x, pos_y, theta = self.fnGet2DMarkerPose(marker_odom_msg)
                #rospy.loginfo(f"x: {pos_x}")
                #rospy.loginfo(f"y: {pos_y}")
                self.marker_2d_pose_x_list.append(pos_x)
                self.marker_2d_pose_y_list.append(pos_y)
                if len(self.marker_2d_pose_x_list) >= 5:
                    self.marker_2d_pose_x_list.pop(0)
                if len(self.marker_2d_pose_y_list) >= 5:
                    self.marker_2d_pose_y_list.pop(0)
                self.marker_2d_pose_x = sum(self.marker_2d_pose_x_list)/len(self.marker_2d_pose_x_list)
                self.marker_2d_pose_y = sum(self.marker_2d_pose_y_list)/len(self.marker_2d_pose_y_list)
                self.marker_2d_theta = theta - math.pi

    def fnParking(self):
        if self.current_parking_sequence == self.ParkingSequence.finished.value:
            pass
            
        elif self.current_parking_sequence == self.ParkingSequence.searching_parking_lot.value:
            self.is_sequence_finished = self.fnSeqSearchingGoal()
            
            if self.is_sequence_finished == True:
                print("Finished 1")
                self.current_parking_sequence = self.ParkingSequence.changing_direction.value
                self.is_sequence_finished = False
            
        
        elif (self.obstacle_detected and self.current_parking_sequence == self.ParkingSequence.parking.value) or self.currently_avoiding:
            
            self.currently_avoiding = True
            self.is_sequence_finished = self.fnAvoidObstacle()

            if self.is_sequence_finished:
                self.is_sequence_finished = False
                if self.obstacle_detected:
                    self.current_parking_sequence = self.ParkingSequence.parking.value
                else:
                    self.current_parking_sequence = self.ParkingSequence.searching_parking_lot.value

        elif self.current_parking_sequence == self.ParkingSequence.changing_direction.value:
            print("changing_direction")
            self.is_sequence_finished = self.fnSeqChangingDirection()
            
            if self.is_sequence_finished == True:
                print("Finished 2")
                self.current_parking_sequence = self.ParkingSequence.parking.value
                self.is_sequence_finished = False

        elif self.current_parking_sequence == self.ParkingSequence.moving_nearby_parking_lot.value:
            print("moving_nearby_parking_lot")
            self.is_sequence_finished = self.fnSeqMovingNearbyParkingLot()
            
            if self.is_sequence_finished == True:
                print("Finished 3")
                self.current_parking_sequence = self.ParkingSequence.parking.value
                self.is_sequence_finished = False

        elif self.current_parking_sequence == self.ParkingSequence.parking.value:
            self.is_sequence_finished = self.fnSeqParking()
            
            if self.is_sequence_finished == True:
                print("Finished 4")
                self.current_parking_sequence = self.ParkingSequence.watering.value
                self.is_sequence_finished = False

        elif self.current_parking_sequence == self.ParkingSequence.watering.value:
            self.is_sequence_finished = self.fnSeqWatering()
            if self.is_sequence_finished:
                self.current_parking_sequence = self.ParkingSequence.stop.value
                self.is_sequence_finished = False


        elif self.current_parking_sequence == self.ParkingSequence.stop.value:
            self.fnStop()
            if self.current_marker != len(self.marker_ids) - 1:
                self.current_parking_sequence = self.ParkingSequence.searching_parking_lot.value
                self.current_marker += 1
                self.marker_2d_pose_x_list = []
                self.marker_2d_pose_y_list = []
                self.is_marker_pose_received = False
            else:
                print("Finished 5")
                self.current_parking_sequence = self.ParkingSequence.finished.value
                rospy.on_shutdown(self.fnShutDown)

    def fnSeqSearchingGoal(self):
        if self.is_marker_pose_received is False:
            self.desired_angle_turn = -0.6
            self.fnTurn(self.desired_angle_turn)
        else:
            start_time = rospy.get_time()
            while rospy.get_time() - start_time > 2.5:
                self.fnStop()
            return True

    def fnSeqWatering(self):
        start_time = rospy.get_time()
        while rospy.get_time() - start_time < 2:
            self.fnGoStraight()
        start_time = rospy.get_time()
        while rospy.get_time() - start_time < 3:
            self.fnStop()
        start_time = rospy.get_time()
        while rospy.get_time() - start_time < 3:
            self.fnReverse()
        return True
        

    def fnAvoidObstacle(self):
        if self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.search_for_space.value:
            if self.is_triggered == False:
                self.is_triggered = True
                self.initial_robot_pose_theta = self.robot_2d_theta
                self.initial_robot_pose_x = self.robot_2d_pose_x
                self.initial_robot_pose_y = self.robot_2d_pose_y
                self.initial_marker_pose_theta = self.marker_2d_theta
                self.initial_marker_pose_x = self.marker_2d_pose_x
                self.initial_marker_pose_y = self.marker_2d_pose_y
            curr_theta = self.robot_2d_theta - self.initial_robot_pose_theta
            if self.obstacle_detected:
                if abs(curr_theta) < self.avoid_turn_angle:
                    if self.search_left:
                        self.fnTurn(-0.6)
                    else:
                        self.fnTurn(0.6)
                else:
                    self.search_left = not self.search_left
                    self.avoid_turn_angle += 0.2
                    self.is_triggered = False
            else:
                start_time = rospy.get_time()
                while rospy.get_time() - start_time < 2:
                    if self.search_left:
                        self.fnTurn(-0.6)
                    else:
                        self.fnTurn(0.6)
                self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.drive_straight.value
        elif self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.drive_straight.value:
            start_time = rospy.get_time()
            while rospy.get_time() - start_time < 2.5:
                self.fnGoStraight()
            self.fnStop()
            self.currently_avoiding = False
            self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.search_for_space.value
            return True
        return False

    def fnAvoidObstacle2(self):
        if self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.search_for_space.value:
            if self.is_triggered == False:
                self.is_triggered = True
                self.initial_robot_pose_theta = self.robot_2d_theta
                self.initial_robot_pose_x = self.robot_2d_pose_x
                self.initial_robot_pose_y = self.robot_2d_pose_y
                self.initial_marker_pose_theta = self.marker_2d_theta
                self.initial_marker_pose_x = self.marker_2d_pose_x
                self.initial_marker_pose_y = self.marker_2d_pose_y
                rospy.logerr("FIRST TIME CALLED")

            curr_theta = self.robot_2d_theta - self.initial_robot_pose_theta
            if self.search_left:
                desired_angle = self.initial_robot_pose_theta + self.avoid_turn_angle
            else:
                desired_angle = self.initial_robot_pose_theta - self.avoid_turn_angle
            while curr_theta < 0:
                curr_theta += math.pi*2
            while curr_theta > math.pi*2:
                curr_theta -= math.pi*2
            while desired_angle < 0:
                desired_angle += math.pi*2
            while desired_angle > math.pi*2:
                desired_angle -= math.pi*2           
            rospy.loginfo(f"search for space desired_angle:{desired_angle}, curr_theta: {curr_theta}")
            if self.obstacle_detected:
                if abs(curr_theta - desired_angle) > 0.01:
                    if self.search_left:
                        self.fnTurn(-0.6)
                    else:
                        self.fnTurn(0.6)
                else:
                    self.fnStop()
                    self.search_left = not self.search_left
                    #self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.turn_90.value
                    self.avoid_turn_angle = self.avoid_turn_angle + 0.2
                    #self.is_triggered = False
            else:
                self.fnStop()
                self.avoid_turn_angle = 0.7
                self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.turn_90.value
        elif self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.turn_90.value:
            rospy.logerr("turning 90")
            curr_theta = self.robot_2d_theta - self.initial_robot_pose_theta
            if self.search_left:
                desired_angle = self.initial_robot_pose_theta + math.pi/2
            else:
                desired_angle = self.initial_robot_pose_theta - math.pi/2
            while curr_theta < 0:
                curr_theta += math.pi*2
            while curr_theta > math.pi*2:
                curr_theta -= math.pi*2
            while desired_angle < 0:
                desired_angle += math.pi*2
            while desired_angle > math.pi*2:
                desired_angle -= math.pi*2     
            rospy.loginfo(f"turn 90 desired_angle:{desired_angle}, curr_theta: {curr_theta}, initial_theta: {self.initial_robot_pose_theta}")
            if abs(curr_theta - desired_angle) > 0.01:
                if self.search_left:
                    self.fnTurn(curr_theta - desired_angle)
                else:
                    self.fnTurn(curr_theta - desired_angle)
            else:
                self.fnStop()
                self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.move_sideways.value
        elif self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.move_sideways.value:
            rospy.logerr("MOVING SIDEWAYS")
            if self.search_left:
                if len(self.obstacle_right) > 0:
                    self.fnGoStraight()
                else:
                    self.fnStop()
                    self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.turn_back.value
            else:
                if len(self.obstacle_left) > 0:
                    self.fnGoStraight()
                else:
                    self.fnStop()
                    self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.turn_back.value
        elif self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.turn_back.value:
            rospy.logerr("turning back")
            curr_theta = self.robot_2d_theta - self.initial_robot_pose_theta
            desired_angle = self.initial_robot_pose_theta
            while curr_theta < 0:
                curr_theta += math.pi*2
            while curr_theta > math.pi*2:
                curr_theta -= math.pi*2
            while desired_angle < 0:
                desired_angle += math.pi*2
            while desired_angle > math.pi*2:
                desired_angle -= math.pi*2     
            rospy.loginfo(f"turn back desired_angle:{desired_angle}, curr_theta: {curr_theta}, initial_theta: {self.initial_robot_pose_theta}")
            if abs(curr_theta - desired_angle) > 0.01:
                if self.search_left:
                    self.fnTurn(0.6)
                else:
                    self.fnTurn(-0.6)
            else:
                self.fnStop()
                self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.drive_straight.value
        elif self.current_obstacle_avoid_sequence == self.ObstacleAvoidanceSequence.drive_straight.value:
            start_time = rospy.get_time()
            while rospy.get_time() - start_time < 2:
                self.fnGoStraight()
            if self.search_left:
                while len(self.obstacle_right) > 0:
                    self.fnGoStraight()
            else:
                while len(self.obstacle_left) > 0:
                    self.fnGoStraight()             
            # start_time = rospy.get_time()
            # while rospy.get_time() - start_time < 3:
            #     if self.search_left:
            #         self.fnTurn(0.6)
            #     else:
            #         self.fnTurn(-0.6)
            # start_time = rospy.get_time()
            # while rospy.get_time() - start_time < 2.0:
            #     self.fnGoStraight()
            self.fnStop()
            self.currently_avoiding = False
            self.is_triggered = False
            self.current_obstacle_avoid_sequence = self.ObstacleAvoidanceSequence.search_for_space.value
            return True
        return False
            
    def fnSeqChangingDirection(self):
        if self.is_triggered == False:
            self.is_triggered = True
            self.initial_robot_pose_theta = self.robot_2d_theta
            self.initial_robot_pose_x = self.robot_2d_pose_x
            self.initial_robot_pose_y = self.robot_2d_pose_y
            self.initial_marker_pose_theta = self.marker_2d_theta
            self.initial_marker_pose_x = self.marker_2d_pose_x
            self.initial_marker_pose_y = self.marker_2d_pose_y

        start_angle = self.robot_2d_theta - self.initial_robot_pose_theta
        # TODO: CHECK THIS
        marker_angle = math.atan2(self.initial_marker_pose_y, self.initial_marker_pose_x)
        while start_angle < 0.0:
            start_angle += math.pi*2
        while start_angle > math.pi*2:
            start_angle -= math.pi*2
        while marker_angle < 0.0:
            marker_angle += math.pi*2
        while marker_angle > math.pi*2:
            marker_angle -= math.pi*2
        desired_angle_turn = start_angle - marker_angle

        if desired_angle_turn > math.pi:
            desired_angle_turn -= math.pi*2
       
        rospy.loginfo(f"marker_theta:{marker_angle}, robot_theta: {start_angle}, desired_angle_turn: {desired_angle_turn}")
        #desired_angle_turn = -1. * desired_angle_turn

        self.fnTurn(desired_angle_turn)
        # desired_angle_turn = 0

        if abs(desired_angle_turn) < 0.08:
            self.fnStop()
            self.current_nearby_sequence = self.NearbySequence.go_straight.value
            self.is_triggered = False
            return True
        return False
        self.fnTurn(desired_angle_turn)
        
        if abs(desired_angle_turn) < 0.075:
            self.fnStop()
            return True
        else:
            return False

    def fnSeqMovingNearbyParkingLot(self):
        if self.current_nearby_sequence == self.NearbySequence.initial_turn.value:
            if self.is_triggered == False:
                self.is_triggered = True
                self.initial_robot_pose_theta = self.robot_2d_theta
                self.initial_robot_pose_x = self.robot_2d_pose_x
                self.initial_robot_pose_y = self.robot_2d_pose_y
                self.initial_marker_pose_theta = self.marker_2d_theta
                self.initial_marker_pose_x = self.marker_2d_pose_x
                self.initial_marker_pose_y = self.marker_2d_pose_y

            start_angle = self.robot_2d_theta - self.initial_robot_pose_theta
            marker_angle = math.atan2(self.initial_marker_pose_y, self.marker_2d_pose_x)
            while start_angle < 0.0:
                start_angle += math.pi*2
            while start_angle > math.pi*2:
                start_angle -= math.pi*2
            while marker_angle < 0.0:
                marker_angle += math.pi*2
            while marker_angle > math.pi*2:
                marker_angle -= math.pi*2
            desired_angle_turn = start_angle - marker_angle
            while desired_angle_turn < 0.0:
                desired_angle_turn += math.pi*2
            while desired_angle_turn > math.pi*2:
                desired_angle_turn -= math.pi*2 
            # if self.initial_marker_pose_theta < 0.0:
            #     #desired_angle_turn = (math.pi / 2.0) + self.initial_marker_pose_theta - (self.robot_2d_theta - self.initial_robot_pose_theta)
            #     desired_angle_turn = math.atan2(self.initial_marker_pose_y, self.marker_2d_pose_x) - (self.robot_2d_theta - self.initial_robot_pose_theta)
            # elif self.initial_marker_pose_theta > 0.0:
            #     desired_angle_turn = -(math.pi / 2.0) + self.initial_marker_pose_theta - (self.robot_2d_theta - self.initial_robot_pose_theta)
            #     #desired_angle_turn = self.initial_marker_pose_theta - (self.robot_2d_theta - self.initial_robot_pose_theta)
            #     desired_angle_turn = math.atan2(self.initial_marker_pose_y, self.marker_2d_pose_x) - (self.robot_2d_theta - self.initial_robot_pose_theta)
            # if desired_angle_turn < 0.0:
            #     desired_angle_turn += 2*math.pi
            #rospy.loginfo("desired_angle_turn %f self.initial_marker_pose_theta %f self.robot_2d_theta %f self.initial_robot_pose_theta %f", desired_angle_turn, self.initial_marker_pose_theta, self.robot_2d_theta, self.initial_robot_pose_theta)
            #rospy.loginfo(f"marker_theta:{marker_angle}, robot_theta: {start_angle}, desired_angle_turn: {desired_angle_turn}")
            desired_angle_turn = -1. * desired_angle_turn

            self.fnTurn(desired_angle_turn)
            # desired_angle_turn = 0

            if abs(desired_angle_turn) < 0.02:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.go_straight.value
                self.is_triggered = False
        
        elif self.current_nearby_sequence == self.NearbySequence.go_straight.value:
            # dist_from_start = self.fnCalcDistPoints(self.initial_robot_pose_x, self.robot_2d_pose_x, self.initial_robot_pose_y, self.robot_2d_pose_y)
            # desired_dist = self.initial_marker_pose_x * abs(math.cos((math.pi / 2.) - self.initial_marker_pose_theta))
            # remained_dist = desired_dist - dist_from_start
            # rospy.loginfo("remained_dist %f desired_dist %f dist_from_start %f", remained_dist, desired_dist, dist_from_start)
            remained_dist = 5
            self.fnGoStraight()
            if remained_dist < 0.01:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.turn_right.value

        elif self.current_nearby_sequence == self.NearbySequence.turn_right.value:
            if self.is_triggered == False:
                self.is_triggered = True
                self.initial_robot_pose_theta = self.robot_2d_theta

            if self.initial_marker_pose_theta < 0.0:
                desired_angle_turn = -(math.pi / 2.0) + (self.robot_2d_theta - self.initial_robot_pose_theta)
            elif self.initial_marker_pose_theta > 0.0:
                desired_angle_turn = (math.pi / 2.0) + (self.robot_2d_theta - self.initial_robot_pose_theta)

            #rospy.loginfo("desired_angle_turn %f self.robot_2d_theta %f self.initial_robot_pose_theta %f", desired_angle_turn, self.robot_2d_theta, self.initial_robot_pose_theta)

            self.fnTurn(desired_angle_turn)

            if abs(desired_angle_turn) < 0.05:
                self.fnStop()
                self.current_nearby_sequence = self.NearbySequence.parking.value
                self.is_triggered = False
                return True

        return False

    def fnSeqParking(self):
        desired_angle_turn = math.atan2(self.marker_2d_pose_y - 0, self.marker_2d_pose_x - 0)
        self.fnTrackMarker(-desired_angle_turn)
        distance = self.fnCalcDistPoints(self.marker_2d_pose_x, self.robot_2d_pose_x, self.marker_2d_pose_y, self.robot_2d_pose_y)
        rospy.loginfo(f"distance: {self.marker_2d_pose_x}")
        if abs(self.marker_2d_pose_x) < 0.51:
            self.fnStop()
            return True
        else:
            return False

    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def fnTurn(self, theta):
        Kp = 0.6

        angular_z = Kp * theta

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)

    def fnGoStraight(self):
        twist = Twist()
        twist.linear.x = 0.1
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)
    
    def fnReverse(self):
        twist = Twist()
        twist.linear.x = -0.1
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def fnTrackMarker(self, theta):
        Kp = 0.9

        angular_z = Kp * theta

        twist = Twist()
        twist.linear.x = 0.10
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)      

    def fnGet2DRobotPose(self, robot_odom_msg):
        quaternion = (robot_odom_msg.pose.pose.orientation.x, robot_odom_msg.pose.pose.orientation.y, robot_odom_msg.pose.pose.orientation.z, robot_odom_msg.pose.pose.orientation.w)
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]

        if theta < 0:
            theta = theta + np.pi * 2
        if theta > np.pi * 2:
            theta = theta - np.pi * 2

        pos_x = robot_odom_msg.pose.pose.position.x
        pos_y = robot_odom_msg.pose.pose.position.y

        return pos_x, pos_y, theta

    def fnGet2DMarkerPose(self, marker_odom_msg):
        quaternion = (marker_odom_msg.pose.pose.orientation.z, marker_odom_msg.pose.pose.orientation.x, marker_odom_msg.pose.pose.orientation.z, marker_odom_msg.pose.pose.orientation.w)
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]

        theta = theta + np.pi / 2.
        #rospy.loginfo("theta : %f", theta)

        if theta < 0:
            theta = theta + np.pi * 2
        if theta > np.pi * 2:
            theta = theta - np.pi * 2

        pos_x = marker_odom_msg.pose.pose.position.z
        pos_y = -marker_odom_msg.pose.pose.position.x

        #rospy.loginfo(f"x: {pos_x}, y: {pos_y}")

        return pos_x, pos_y, theta

    def fnCalcDistPoints(self, x1, x2, y1, y2):
        return math.sqrt((x1 - x2) ** 2. + (y1 - y2) ** 2.)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)
    
    def SensorCallbackLeft(self, msg):
        self.obstacle_left = msg.ranges

    def SensorCallbackRight(self, msg):
        self.obstacle_right = msg.ranges

    def SensorCallbackStraight(self, msg):
        if len(msg.ranges) == 0:
            rospy.loginfo("obstacle not detected")
            self.obstacle_detected = False
        else:
            rospy.loginfo("obstacle detected")
            self.obstacle_detected = True
        return

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('plant_watering_robot')
    node = PlantyBot()
    node.main()
